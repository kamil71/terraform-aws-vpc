# Declare the data source
data "aws_availability_zones" "available" {
  state = "available"
}

# e.g., Create public subnets in the first two available availability zones
resource "aws_subnet" "public_subnet" {
  depends_on = [
    aws_vpc.vpc,
  ]
#  count             = length(var.public_subnets_cidr)
#  count             = var.cidr_block == "10.0.0.0/16" ? 4 : 0
  for_each = var.public_subnet_numbers
  vpc_id            = aws_vpc.vpc.id
#  cidr_block        = element(var.public_subnets_cidr, count.index)
#  cidr_block        = element(cidrsubnets("10.0.3.0/16", 4, 4, 8, 4),count.index)
  cidr_block = cidrsubnet(aws_vpc.vpc.cidr_block, 2, each.value)
  availability_zone = element(var.availability_zones, 0)

  tags = {
  #  Name = "${var.environment}-public-subnet1-${element(var.availability_zones, count.index)}"
  }

  map_public_ip_on_launch = true
}



# e.g., Create public subnets in the first two available availability zones
resource "aws_subnet" "private_subnet" {
  depends_on = [
    aws_vpc.vpc,
  ]
#  count             = length(var.private_subnets_cidr)
#  count             = var.cidr_block == "10.0.0.0/16" ? 4 : 0
  for_each = var.public_subnet_numbers
  vpc_id            = aws_vpc.vpc.id
#  cidr_block        = element(var.private_subnets_cidr, count.index)
 # cidr_block        = element(cidrsubnets("10.0.2.0/16", 4, 4, 8, 4),count.index)
  cidr_block = cidrsubnet(aws_vpc.vpc.cidr_block, 2, each.value)
  availability_zone = element(var.availability_zones, 0)

  tags = {
  #  Name = "${var.environment}-private-subnet1-${element(var.availability_zones, count.index)}"
  }

  map_public_ip_on_launch = true
}